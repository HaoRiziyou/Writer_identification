#!/usr/bin/env python3

import warnings
warnings.filterwarnings('ignore', category=FutureWarning)

import fargv

import os

from PIL import Image
from skimage.morphology import skeletonize
from skimage.util import invert
from skimage import filters
import numpy as np
import matplotlib.pyplot as plt
from pipeline.skeletonization import Skeletonizer

from pipeline.connect import get_concat_v_multi_resize
from pipeline.sampling import sample_to_penpositions
from pipeline.graves import GravesWriter
from pipeline.align import align
from pipeline.render_skeleton import render_skeleton
from pipeline.pen_style_transfer import PenStyleTransfer

from datastructures.PenPosition import plotPenPositions




def main():
    #-input ./docs/img/input.png -text_in 'above or sinking bellow' -text_out 'hello world'
    params={'text_in':'above or sinking bellow','text_out':'hello world' , 'output':'/tmp/','input':'./docs/img/input.png', 'plot':False,
            'skeleton':('pix2pix','naive','qiang1','qiang2','qiang3')}
    args, _ = fargv.fargv(params)

    inputImg = Image.open(args.input)
    if args.skeleton == 'pix2pix':
        with Skeletonizer() as skeletonizer:
            skeletonBlurImg = skeletonizer.skeletonize_blurred(inputImg)
            skeletonImg = skeletonizer.skeletonize_sharp(skeletonBlurImg)
        penPositions = sample_to_penpositions(skeletonImg)
    if args.skeleton == 'naive':
        data = inputImg.convert("L")
        image = np.asarray(data)
        val = filters.threshold_otsu(image)
        image = image < val
        skeletonImg = skeletonize(image)
        penPositions = sample_to_penpositions(skeletonImg)
        # https://scikit-image.org/docs/dev/auto_examples/edges/plot_skeleton.html
        # https://scikit-image.org/docs/0.10.x/auto_examples/plot_medial_transform.html
       # raise NotImplemented()
    #else:
       # raise NotImplemented()
    out_images=[]
    with GravesWriter() as writer:
        for n, text_out in enumerate(args.text_out.split('\n')):
            newPenPositions = writer.write(text_out, args.text_in, penPositions)
            newPenPositions = align(newPenPositions, penPositions)
            newSkeletonBlurImg, newSkeletonImg = render_skeleton(newPenPositions, inputImg.size)
            with PenStyleTransfer() as penStyleTransfer:
                outputImg = penStyleTransfer.transferStyle(newSkeletonBlurImg, inputImg)
            if args.plot:
                if args.skeleton == 'pix2pix':
                    print(inputImg.size)
                    print("Done. Displaying results ...")
                    plt.figure('Full Pipeline', figsize=(16, 9))
                    plt.subplot(3, 2, 1)
                    plt.imshow(inputImg)
                    plt.subplot(3, 2, 3)
                    plt.imshow(skeletonBlurImg)
                    plt.subplot(3, 2, 5)
                    plt.imshow(skeletonImg, cmap='binary', vmax=10)
                    plotPenPositions(penPositions)
                    plt.subplot(3, 2, 6)    
                    plt.imshow(newSkeletonImg, cmap='binary', vmax=256*10)
                    plotPenPositions(newPenPositions)
                    plt.subplot(3, 2, 4)
                    plt.imshow(newSkeletonBlurImg)
                    plt.subplot(3, 2, 2)
                    plt.imshow(outputImg)
                    plt.show()
                if args.skeleton == 'naive':
                    #print("Done. Displaying results ...")
                    plt.figure('Full Pipeline', figsize=(16, 9))
                    
                    plt.subplot(2, 2, 1)
                    plt.imshow(inputImg)
                    
                    plt.subplot(2, 2, 3)
                    plt.imshow(skeletonImg, cmap='binary', vmax=10)
                    plotPenPositions(penPositions)
                    plt.subplot(2, 2, 4)    
                    plt.imshow(newSkeletonImg, cmap='binary', vmax=256*10)
                    plotPenPositions(newPenPositions)
                    
                    plt.subplot(2, 2, 2)
                    plt.imshow(outputImg)
                    plt.show()
            output_path = f"{args.output}/{n}.png"
            print(f"saving in {output_path} text:'{text_out}'" )
            outputImg.save(output_path)
            out_images.append(outputImg)
    
        #TODO stich all into one
        # all_stiched.save(f"{args.output}/all.png")
       #get_concat_v_multi_resize([output_images]).save(output_path) 


if __name__ == "__main__":
    main()
    









